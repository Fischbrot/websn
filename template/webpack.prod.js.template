const path = require('path')
const merge = require('webpack-merge')
const common = require('./webpack.common.js')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const HtmlBeautifyWebpackPlugin = require('html-beautify-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const HtmlCriticalWebpackPlugin = require('html-critical-webpack-plugin')
const ImageminWebpackPlugin = require('imagemin-webpack-plugin').default

let websnConfig

try {
  websnConfig = require('./websn.config.json')
} catch (err) {
  console.error('No websn.config.json found.')
  process.exit(1)
}

const htmlWebpackPlugins = []

for (const htmlFile of websnConfig.input.htmlFiles) {
  htmlWebpackPlugins.push(
    new HtmlWebpackPlugin({
      filename: htmlFile,
      template: path.resolve(__dirname, websnConfig.input.base, htmlFile),
      minify: (websnConfig.style.minifiedHtml)
        ? {
          collapseBooleanAttributes: true,
          collapseInlineTagWhitespace: true,
          collapseWhitespace: true,
          decodeEntities: true,
          minifyCss: true,
          minifyJs: true,
          removeComments: true
        }
        : false
    })
  )
}

module.exports = merge(common, {
  module: {
    rules: [
      {
        test: /\.s?[ac]ss$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              url: false
            }
          },
          'postcss-loader',
          {
            loader: 'sass-loader',
            options: {
              includePaths: [
                path.resolve(
                  __dirname, websnConfig.input.base, websnConfig.input.styles
                )
              ]
            }
          }
        ]
      }
    ]
  },
  plugins: [
    ...htmlWebpackPlugins,
    ...(((!websnConfig.style.minifiedHtml) && websnConfig.style.beautifiedHtml)
      ? [
        new HtmlBeautifyWebpackPlugin({
          config: {
            html: {
              end_with_newline: true,
              indent_size: 2,
              indent_with_tabs: false,
              indent_inner_html: true,
              preserve_newlines: true
            }
          },
          replace: ['type="text/javascript"']
        })
      ]
      : []
    ),
    new MiniCssExtractPlugin({
      filename: websnConfig.output.styles
    }),
    ...((websnConfig.style.criticalCss)
      ? [
        new HtmlCriticalWebpackPlugin({
          base: path.resolve(__dirname, websnConfig.output.base),
          src: websnConfig.htmlFiles[0],
          dest: websnConfig.htmlFiles[0],
          inline: true,
          minify: true,
          extract: false,
          width: 375,
          height: 667,
          penthouse: {
            blockJSRequests: false
          }
        })
      ]
      : []
    ),
    new ImageminWebpackPlugin({ test: /\.(jpe?g|png|gif|svg)$/i })
  ]
})
